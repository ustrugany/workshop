SHARED_DOCKER_SERVICES_PATH ?= .shared/pf-docker-shared
SHARED_DOCKER_SERVICES_ENABLED ?= true
SHARED_DOCKER_SERVICES ?= mongodb-pf-local rabbit-pf-local

help::
	@echo "Makefile.environment"
	@echo "\033[0;33m\tenvironment\033[0m - Run project and shared environment"
	@echo "\033[0;33m\tenvironment-clean\033[0m - Remove project and shared environment"
	@echo "\033[0;33m\tcode-submodules\033[0m - Initialize git submodules"
	@echo "\033[0;33m\taws-login\033[0m - Login to AWS ECR with stored credentials"

print-variables::
	@echo "\n\n"
	@echo 'ENV="${ENV}"'
	@echo 'BUILD_ENV="${BUILD_ENV}"'
	@echo 'SHARED_DOCKER_SERVICES_ENABLED="${SHARED_DOCKER_SERVICES_ENABLED}"'
	@echo 'SHARED_DOCKER_SERVICES_PATH="${SHARED_DOCKER_SERVICES_PATH}"'
	@echo 'DOCKER_COMPOSE_FILE="${DOCKER_COMPOSE_FILE}"'
	@echo 'SHARED_DOCKER_SERVICES="${SHARED_DOCKER_SERVICES}"'
	@echo 'DOCKER_FILE="${DOCKERFILE}"'
	@echo "\n\n"

code-submodules:
	git submodule update --init --recursive

aws-login:
	eval `aws ecr get-login --region ap-southeast-1 --no-include-email`

ifeq ($(BUILD_ENV),ci)
up rm print-variables: DOCKER_COMPOSE_FILE = docker-compose.yml -f docker-compose.environment.yml
else
up rm print-variables: DOCKER_COMPOSE_FILE = docker-compose.yml -f docker-compose.environment.yml -f docker-compose.tracing.yml
endif

environment: print-variables aws-login code-submodules shared-network-up shared-environment up build-config
environment-clean: print-variables rm shared-environment-clean shared-network-rm
