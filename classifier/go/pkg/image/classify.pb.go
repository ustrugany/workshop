// Code generated by protoc-gen-go. DO NOT EDIT.
// source: classify.proto

package image

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Image struct {
	Path                 string   `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Image) Reset()         { *m = Image{} }
func (m *Image) String() string { return proto.CompactTextString(m) }
func (*Image) ProtoMessage()    {}
func (*Image) Descriptor() ([]byte, []int) {
	return fileDescriptor_29fe88afc6e3cb8b, []int{0}
}

func (m *Image) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Image.Unmarshal(m, b)
}
func (m *Image) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Image.Marshal(b, m, deterministic)
}
func (m *Image) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Image.Merge(m, src)
}
func (m *Image) XXX_Size() int {
	return xxx_messageInfo_Image.Size(m)
}
func (m *Image) XXX_DiscardUnknown() {
	xxx_messageInfo_Image.DiscardUnknown(m)
}

var xxx_messageInfo_Image proto.InternalMessageInfo

func (m *Image) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

type Result struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Result) Reset()         { *m = Result{} }
func (m *Result) String() string { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()    {}
func (*Result) Descriptor() ([]byte, []int) {
	return fileDescriptor_29fe88afc6e3cb8b, []int{1}
}

func (m *Result) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Result.Unmarshal(m, b)
}
func (m *Result) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Result.Marshal(b, m, deterministic)
}
func (m *Result) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Result.Merge(m, src)
}
func (m *Result) XXX_Size() int {
	return xxx_messageInfo_Result.Size(m)
}
func (m *Result) XXX_DiscardUnknown() {
	xxx_messageInfo_Result.DiscardUnknown(m)
}

var xxx_messageInfo_Result proto.InternalMessageInfo

func (m *Result) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func init() {
	proto.RegisterType((*Image)(nil), "model.Image")
	proto.RegisterType((*Result)(nil), "model.Result")
}

func init() { proto.RegisterFile("classify.proto", fileDescriptor_29fe88afc6e3cb8b) }

var fileDescriptor_29fe88afc6e3cb8b = []byte{
	// 131 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4b, 0xce, 0x49, 0x2c,
	0x2e, 0xce, 0x4c, 0xab, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0xcd, 0xcd, 0x4f, 0x49,
	0xcd, 0x51, 0x92, 0xe6, 0x62, 0xf5, 0xcc, 0x4d, 0x4c, 0x4f, 0x15, 0x12, 0xe2, 0x62, 0x29, 0x48,
	0x2c, 0xc9, 0x90, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x02, 0xb3, 0x95, 0x64, 0xb8, 0xd8, 0x82,
	0x52, 0x8b, 0x4b, 0x73, 0x4a, 0x40, 0xb2, 0x79, 0x89, 0xb9, 0xa9, 0x30, 0x59, 0x10, 0xdb, 0xc8,
	0x9c, 0x8b, 0xcb, 0x19, 0x62, 0x66, 0x66, 0x6a, 0x91, 0x90, 0x26, 0x17, 0x07, 0x94, 0x57, 0x29,
	0xc4, 0xa3, 0x07, 0x36, 0x5c, 0x0f, 0x6c, 0xb2, 0x14, 0x2f, 0x94, 0x07, 0x31, 0x4a, 0x89, 0x21,
	0x89, 0x0d, 0xec, 0x02, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x4e, 0x5a, 0x05, 0x6a, 0x93,
	0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ClassifierClient is the client API for Classifier service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ClassifierClient interface {
	Classify(ctx context.Context, in *Image, opts ...grpc.CallOption) (*Result, error)
}

type classifierClient struct {
	cc *grpc.ClientConn
}

func NewClassifierClient(cc *grpc.ClientConn) ClassifierClient {
	return &classifierClient{cc}
}

func (c *classifierClient) Classify(ctx context.Context, in *Image, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/model.Classifier/Classify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClassifierServer is the server API for Classifier service.
type ClassifierServer interface {
	Classify(context.Context, *Image) (*Result, error)
}

// UnimplementedClassifierServer can be embedded to have forward compatible implementations.
type UnimplementedClassifierServer struct {
}

func (*UnimplementedClassifierServer) Classify(ctx context.Context, req *Image) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Classify not implemented")
}

func RegisterClassifierServer(s *grpc.Server, srv ClassifierServer) {
	s.RegisterService(&_Classifier_serviceDesc, srv)
}

func _Classifier_Classify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Image)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassifierServer).Classify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.Classifier/Classify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassifierServer).Classify(ctx, req.(*Image))
	}
	return interceptor(ctx, in, info, handler)
}

var _Classifier_serviceDesc = grpc.ServiceDesc{
	ServiceName: "model.Classifier",
	HandlerType: (*ClassifierServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Classify",
			Handler:    _Classifier_Classify_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "classify.proto",
}
